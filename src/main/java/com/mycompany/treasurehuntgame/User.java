/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.treasurehuntgame;

import java.util.Random;
import javax.swing.JOptionPane;

/**
 *
 * @author mehmetenes
 */
// ----------------------------
// MapNode.java
// ----------------------------
public class User extends javax.swing.JFrame {

    /**
     * Creates new form User
     */
    String username;
    MapNode currentNode;
    int score;
    int poison = 0;
    int heal = 0;

    public User() {
        initComponents();
        this.username = null;
        this.currentNode = null;
        this.score = 0;
        jTextField1.setText("");
        jTextField1.setBackground(new java.awt.Color(0, 0, 0, 1));
    }

    public void updateScore(String type) {

        switch (type) {
            case "treasure":
                if (poison > 0) { // Elimizde poison varsa puan alamıyoruz.
                    poison--;
                    System.out.println("Elinizde poison olduğu için puan alamadınız!!");
                    JOptionPane.showMessageDialog(null, "You don't get points for having poison.");
                } else {
                    score += 10;
                    JOptionPane.showMessageDialog(null, "You have arrived at the treasury. You have earned 10 points.");
                }
                break;
            case "trap":
                if (heal > 0) { // Elimizde heal varsa tuzaktan etkilenmiyoruz.
                    heal--;
                    System.out.println("Elinizde heal olduğu için tuzaktan etkilenmediniz!!");
                    JOptionPane.showMessageDialog(null, "You are not affected by trap because you have heal.");
                } else {
                    score -= 5;
                    JOptionPane.showMessageDialog(null, "You have arrived at the trap. You have lost 5 points.");
                }
                break;
            case "mystery_box":
                Random random = new Random();
                int feature = random.nextInt(2);
                if (feature == 0) { // Mystery Box eksi puan verecek.
                    if (heal == 0) { // Elimizde heal yoksa tuzaktan etkileniyoruz.
                        score -= 10;
                        System.out.println("You get -10 points from mystery box");
                        JOptionPane.showMessageDialog(null, "You get -10 points from mystery box.");
                    } else {
                        heal--;
                        System.out.println("Elinizde heal olduğu için mystery box tuzağından etkilenmediniz!!");
                        JOptionPane.showMessageDialog(null, "You are not affected by mystery box's trap because you have heal.");
                    }
                } else if (feature == 1) { // Mystery Box artı puan verecek.
                    if (poison == 0) {// Elimizde poison yoksa puan alıyoruz.
                        score += 20;
                        System.out.println("You get 20 points from mystery box");
                        JOptionPane.showMessageDialog(null, "You get 20 points from mystery box");
                    } else {
                        poison--;
                        System.out.println("Elinizde poison olduğu için mystery boxtan puan alamadınız!!");
                        JOptionPane.showMessageDialog(null, "You don't get mystery box's points for having poison.");
                    }
                }

        }
    }

    public void moveForward(int steps) {
        for (int i = 0; i < steps && currentNode != null && currentNode.next != null; i++) {
            currentNode = currentNode.next;
        }
    }

    public void moveBackward(int steps) {
        for (int i = 0; i < steps && currentNode != null && currentNode.prev != null; i++) {
            currentNode = currentNode.prev;
        }
    }

    public void resetPosition() {
        this.currentNode = null;
    }

    public void resetScore() {
        this.score = 0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(800, 800));
        setMinimumSize(new java.awt.Dimension(800, 800));
        setPreferredSize(new java.awt.Dimension(800, 800));
        getContentPane().setLayout(null);

        jTextField1.setBackground(new java.awt.Color(229, 215, 167));
        jTextField1.setFont(new java.awt.Font("Kokonor", 0, 24)); // NOI18N
        jTextField1.setBorder(null);
        getContentPane().add(jTextField1);
        jTextField1.setBounds(230, 320, 400, 50);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/username.png"))); // NOI18N
        jLabel1.setOpaque(true);
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 800, 770);

        jButton3.setContentAreaFilled(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3);
        jButton3.setBounds(150, 310, 60, 60);

        jButton2.setContentAreaFilled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(280, 600, 240, 80);

        jButton1.setContentAreaFilled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(260, 480, 280, 90);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if (jTextField1.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Username cannot be empty !", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            username = jTextField1.getText();
            Game game = new Game(this);
            game.setSize(1100, 700);
            game.setLocationRelativeTo(null);
            game.setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        jTextField1.setText("");
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        MainMenu menu = new MainMenu();
        menu.setLocationRelativeTo(null);
        menu.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(User.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(User.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(User.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(User.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new User().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
